#!/usr/bin/env bash

NAME="mvregex"
CODENAME="mvregex"
COPYRIGHT="Copyright (C) 2007 Nathan Shearer"
LICENSE="GNU General Public License 2.0"
VERSION="2.1.1.1"

# \brief Ensures dependencies are present
# \param $@ The dependencies to check for
function mvregex_check_dependencies
{
	for TOOL in "$@"; do
		if ! type "$TOOL" >/dev/null 2>/dev/null; then
			printf '%s\n' "$CODENAME: \"$TOOL\" is required for this application to work correctly." >&2
			exit
		fi
	done
}

function mvregex_help
{
	#     01234567890123456789012345678901234567890123456789012345678901234567890123456789
	printf '%s\n' "Description:"
	printf '%s\n' "  Move or rename files that match the given regular expression."
	printf '%s\n'
	printf '%s\n' "Usage:"
	printf '%s\n' "  $CODENAME [options] SOURCE_REGEX DESTINATION_REGEX FILE..."
	printf '%s\n'
	printf '%s\n' "Options:"
	printf '%s\n' "  -f, --force"
	printf '%s\n' "    Do not prompt before overwriting files. Disabled by default, but writable"
	printf '%s\n' "    files are still overwritten by default."
	printf '%s\n' "    Without this option, overwrite files that are writable, and only prompt for"
	printf '%s\n' "    files that are not writable."
	printf '%s\n' "    With this option, overwrite all files without prompting."
	printf '%s\n' "    If you specify more than one of -f, -i, -n, only the final one takes effect."
	printf '%s\n' "    See -i or -n to disable overwriting existing files."
	printf '%s\n' "  -h, --help"
	printf '%s\n' "    Display this help message and exit."
	printf '%s\n' "  -i, --interactive"
	printf '%s\n' "    Prompt before overwriting files. Disabled by default."
	printf '%s\n' "    If you specify more than one of -f, -i, -n, only the final one takes effect."
	printf '%s\n' "  -n, --no-clobber"
	printf '%s\n' "    Do not overwrite files. Disabled by default."
	printf '%s\n' "    If you specify more than one of -f, -i, -n, only the final one takes effect."
	printf '%s\n' "  -p, --pretend"
	printf '%s\n' "    Performs a dry run and prints out what files would be moved. No files are"
	printf '%s\n' "    actually moved. This option will increase the verbosity level from 0 to 1."
	printf '%s\n' "  -r, --recursive"
	printf '%s\n' "    Process files in directories recursively. Disabled by default."
	printf '%s\n' "  -v"
	printf '%s\n' "    Increase the verbosity level by 1."
	printf '%s\n' "  --verbose #"
	printf '%s\n' "    Use more or less verbose output. Valid values are:"
	printf '%s\n' "      0  Default. No output."
	printf '%s\n' "      1  Show only the files that are moved."
	printf '%s\n' "      2  Show all files."
	printf '%s\n'
	printf '%s\n' "Examples:"
	printf '%s\n' "  Convert \"JPG\" extension to \"jpg\""
	printf '%s\n' "    $CODENAME -p -v '[jJ][pP][eE]?[gG]\$' 'jpg' *"
	printf '%s\n' "  Convert \"###\" to \"S#E##\""
	printf '%s\n' "    $CODENAME -p -v '^([0-9])([0-9][0-9])' 'S\1E\2' *.mkv"
	printf '%s\n' "  Convert upper case to lower case"
	printf '%s\n' "    $CODENAME -p -v '(.*)' '\L\1' *"
	printf '%s\n' "  Convert lower case to upper case"
	printf '%s\n' "    $CODENAME -p -v '(.*)' '\U\1' *"
	printf '%s\n' "  Remove trailing spaces on all files recursively"
	printf '%s\n' "    $CODENAME -p -r '^(.*) +$' '\1' *"
	printf '%s\n' "  Remove trailing . on all files recursively"
	printf '%s\n' "    $CODENAME -p -r '^(.*)\\\\.+$' '\1' *"
	printf '%s\n'
	printf '%s\n' "Version:"
	printf '%s\n' "  $NAME $VERSION"
	printf '%s\n' "  $COPYRIGHT"
	printf '%s\n' "  Licensed under $LICENSE"
}

function mvregex_main
{
	for SRC in "$@"; do
		if $RECURSIVE && [ "$(stat -c %F "$SRC")" = "directory" ]; then
			find "$SRC" -mindepth 1 -maxdepth 1 -print0 | \
				sort -z | \
				uniq -z | \
				{
					local STATUS=0
					while IFS= read -r -d $'\0' FILE; do
						# strip the leading ./ that find prepends to each string
						FILE=$(printf "%s" "$FILE" | sed -r 's/^\.\///')

						mvregex_main "$FILE"
						if [ $? -ne 0 ]; then
							STATUS=1
						fi
					done
					return $STATUS
				}
		fi

		SRC_NAME=$(basename "$SRC")
		SRC_PATH=$(dirname "$SRC")
		DST_NAME=$(printf %s "$SRC_NAME" | sed -r "s/$SOURCE_REGEX/$DESTINATION_REGEX/")
		if [ \( $VERBOSE -ge 1 \) -a \( "$SRC_NAME" != "$DST_NAME" \) ]; then
			printf '%s\n' "'$SRC_PATH/$SRC_NAME' -> '$SRC_PATH/$DST_NAME'"
		fi
		if [ \( $VERBOSE -ge 2 \) -a \( "$SRC_NAME" = "$DST_NAME" \) ]; then
			printf '%s\n' "'$SRC_PATH/$SRC_NAME' -> '$SRC_PATH/$DST_NAME'"
		fi
		if ! $PRETEND && [ "$SRC_NAME" != "$DST_NAME" ]; then
			mv $MV_ARGS -- "$SRC_PATH/$SRC_NAME" "$SRC_PATH/$DST_NAME"
		fi
	done
}

#------------------------------------------------------------------------------
# default configuration

MV_ARGS=""
PRETEND=false
RECURSIVE=false
VERBOSE=0

#------------------------------------------------------------------------------
# config files

if [ -r /etc/$CODENAME.conf ]; then
	. /etc/$CODENAME.conf
fi
if [ -r ~/.$CODENAME.conf ]; then
	. ~/.$CODENAME.conf
fi

#------------------------------------------------------------------------------
# command line arguments

if [ $# -eq 0 ]; then
	mvregex_help
	exit 1
fi

THIS="$0"
while [ $# -ne 0 ]; do
	case "$1" in
		"-f"|"--force")
			MV_ARGS="$MV_ARGS -f"
			shift
			;;
		"-h"|"--help")
			mvregex_help
			exit
			;;
		"-i"|"--interactive")
			MV_ARGS="$MV_ARGS -i"
			shift
			;;
		"-n"|"--no-clobber")
			MV_ARGS="$MV_ARGS -n"
			shift
			;;
		"-p"|"--pretend")
			PRETEND=true
			if [ "$VERBOSE" -eq 0 ]; then
				VERBOSE=1
			fi
			shift
			;;
		"-r"|"--recursive")
			RECURSIVE=true
			shift
			;;
		"-v")
			VERBOSE=$(($VERBOSE+1))
			shift
			;;
		"--verbose")
			VERBOSE="$2"
			shift 2
			;;
		*)
			break;;
	esac
done

SOURCE_REGEX="$1"
shift
DESTINATION_REGEX="$1"
shift

#------------------------------------------------------------------------------
# prepare environment

mvregex_check_dependencies sed mv

#------------------------------------------------------------------------------
# begin execution

mvregex_main "$@"
